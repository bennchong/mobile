import { decryptFromPayload } from "./crypto";

const fetchResponse = {
  created: 1564558799,
  ttl: 1564558979,
  id: "62b6155c-1d3c-4b2b-acd2-7c0e88605452",
  document: {
    iv: "KLzAwC3aUH32G8GO",
    cipherText:
      "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",
    tag: "L8z+y8U7Tj+PhnEBjIaNSQ=="
  }
};

const expected = {
  schema: "tradetrust/v1.0",
  data: {
    id: "891ca69d-29f3-47b0-ab01-c05f64b0780f:string:12345671",
    issuers: [
      {
        name:
          "5a091ac6-46da-420a-acfc-62c38c710c2e:string:Ministry of Manpower",
        documentStore:
          "971db22d-832c-41d9-bee4-92e5ce3d8b75:string:0x590F8DFFdb113e1Dcf4974DEaA9b52A8251cec29"
      }
    ],
    pass: {
      type: "b4d228ca-c27e-4fe6-9411-643b4e90b2b4:string:Employment Pass",
      status: "9fdde720-86f3-4726-9bc7-73c508555aca:string:Live",
      expiryDate:
        "10ea150d-6f7a-416b-9a2f-ba1a7ccdf48b:string:2020-11-14T00:00:00+00:00",
      legalTillDate:
        "0f22268e-5370-4673-bb34-8160a274406c:string:2020-11-14T00:00:00+00:00",
      applicationDate:
        "56e63530-0663-43b9-b7dc-8644e301fe7b:string:2020-11-14T00:00:00+00:00",
      issueDate:
        "b90e62d8-04bd-4180-b805-2712a7984ab5:string:2018-11-14T00:00:00+00:00",
      renewalDate:
        "ec828846-efa6-45cd-bc99-476c9e48e511:string:2020-12-25T00:00:00+00:00",
      isMultipleJourney: "1dea6fc5-b053-49fc-bd90-06910c61505f:boolean:true"
    },
    recipient: {
      photo:
        "a284e815-9fa1-4637-bcf0-e74c5e3ce46c:string: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",
      fin: "a5321077-d863-4501-9eae-96d897e204ce:string:G9999999A",
      name: "be03ae12-fdd4-492d-936f-17d9d77f9df9:string:justina tan",
      occupation: {
        frameworkName: "f4c0cdec-6f80-452f-bb23-124a106d44ce:string:framework",
        frameworkVersion:
          "854364b6-3b50-4330-9d7d-570a90358fc9:string:version1",
        code: "77e1b573-bf51-4e7a-a841-3aeccd3082f0:string:123",
        description: "8a94aa6c-7646-4eb9-bbd0-730d912629e1:string:asd"
      },
      country: "183bcd89-5343-419d-93e5-0ecbb61bd889:string:malaysia",
      dob:
        "e23804c1-52ac-42a1-9f75-c104151e716e:string:2018-11-14T00:00:00+00:00",
      maritalStatus: "c85daa88-2cfe-4f0e-8ad1-5370a453f1a7:string:single",
      address: {
        postalCode: "46176982-56e5-48bb-8e18-e5d180f9071f:number:123456",
        postOfficeBoxNumber:
          "551b3022-e1b1-4e6e-bee0-90f39e615d07:string:#03-08",
        streetAddress:
          "c9346fe0-ff3d-40a7-9d3e-0f0935d3adce:string:Block 123 toa payoh ave 4"
      }
    },
    employer: {
      uen: "9a21b9e0-cacf-452e-8d83-13ab811f491a:string:123981298391",
      name: "a6d3e1a1-6974-4721-b454-11f938273631:string:trina tan",
      sector: "ad19d53c-b4b0-4082-aa91-bef4443e852d:string:construction"
    }
  },
  privacy: {},
  signature: {
    type: "SHA3MerkleProof",
    targetHash:
      "cb7b0ccaf3c9f496a2f8a8dd2628f365cff5cb28c5e41a0ccbba12218757bcc6",
    proof: [],
    merkleRoot:
      "cb7b0ccaf3c9f496a2f8a8dd2628f365cff5cb28c5e41a0ccbba12218757bcc6"
  }
};

const uploadResponse = {
  id: "62b6155c-1d3c-4b2b-acd2-7c0e88605452",
  ttl: 1564558979,
  key: "cd5bbdb427e196129ceb0557c4c78832c18af19dab1bc79e9705ab2dd278ee99",
  type: "OPEN-ATTESTATION-TYPE-1"
};

let malformedFetchResponse;
let malformedUploadResponse;
beforeEach(() => {
  malformedFetchResponse = JSON.parse(JSON.stringify(fetchResponse));
  malformedUploadResponse = JSON.parse(JSON.stringify(uploadResponse));
});

describe("decryptFromPayload", () => {
  it("should decrypt properly given valid parameters", () => {
    const result = decryptFromPayload(fetchResponse, uploadResponse);
    expect(result).toEqual(expected);
  });

  it("should throw error when ciphertext in fetch response is missing", () => {
    delete malformedFetchResponse.document.cipherText;
    const result = () =>
      decryptFromPayload(malformedFetchResponse, uploadResponse);
    expect(result).toThrowError("cipherText not found");
  });

  it("should throw error when ciphertext in fetch response is missing", () => {
    delete malformedFetchResponse.document.iv;
    const result = () =>
      decryptFromPayload(malformedFetchResponse, uploadResponse);
    expect(result).toThrowError("iv not found");
  });

  it("should throw error when tag in fetch response is missing", () => {
    delete malformedFetchResponse.document.tag;
    const result = () =>
      decryptFromPayload(malformedFetchResponse, uploadResponse);
    expect(result).toThrowError("tag not found");
  });

  it("should throw error when key in upload response is missing", () => {
    delete malformedUploadResponse.key;
    const result = () =>
      decryptFromPayload(fetchResponse, malformedUploadResponse);
    expect(result).toThrowError("key not found");
  });

  it("should throw error when type in upload response is missing", () => {
    delete malformedUploadResponse.type;
    const result = () =>
      decryptFromPayload(fetchResponse, malformedUploadResponse);
    expect(result).toThrowError("type not found");
  });
});
